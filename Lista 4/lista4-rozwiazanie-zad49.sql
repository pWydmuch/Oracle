--zad.49
AlTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';
Drop PROCEDURE wstaw_myszy;


ROLLBACK ;

BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Myszy
    (
        nr_myszy       NUMBER GENERATED by default on null as IDENTITY (increment by 1 start with 1)
            CONSTRAINT msz_pk PRIMARY KEY,
        lowca          VARCHAR2(15)
            CONSTRAINT msz_lc_kc_fk REFERENCES KOCURY (PSEUDO),
        zjadacz        VARCHAR2(15)
            CONSTRAINT msz_zj_kc_fk REFERENCES KOCURY (PSEUDO),
        waga_myszy     NUMBER
            CONSTRAINT msz_ch_wg CHECK (waga_myszy BETWEEN 5 AND 10),
        data_zlowienia DATE NOT NULL,
        data_wydania   DATE
            CONSTRAINT msz_ch_wed CHECK (data_wydania =
                                         next_day(last_day(data_wydania) - 7, ''Wednesday'')),
        CONSTRAINT msz_ch_dt CHECK ( data_wydania > data_zlowienia )
    )';
end; --7 w podwojnych '' '' bo nie moze byc pojedyncze bo jest w stringu

DROP TABLE  Myszy;

BEGIN
    FOR kot IN (SELECT * FROM KOCURY)
        LOOP
            EXECUTE IMMEDIATE '
        CREATE TABLE MYSZY_' || kot.PSEUDO ||
                              '(
                                 nr_myszy NUMBER PRIMARY KEY,
                                 waga_myszy NUMBER CHECK (waga_myszy BETWEEN 5 AND 10),
                                 data_zlowienia DATE  NOT NULL
                             )';
        END LOOP;
end;

INSERT INTO MYSZY_TYGRYS VALUES (1,6,SYSDATE);
INSERT INTO MYSZY_TYGRYS VALUES (2,7,SYSDATE);

BEGIN
    FOR kot IN (SELECT * FROM KOCURY)
        LOOP
            EXECUTE IMMEDIATE '
        DROP TABLE MYSZY_' || kot.PSEUDO;
        END LOOP;
end;

alter session set nls_date_language='English';

-- Nie trzeba stosować TO_DATE()
DECLARE

    data_koniec        DATE   := TO_DATE('2020-01-20');
    biezaca_data       DATE   := TO_DATE('2004-01-01');
    ostatnia_srd       DATE   := (NEXT_DAY(LAST_DAY(TO_DATE('2004-01-01'))-7, 'Środa'));

    TYPE daneKota IS RECORD (pseudo kocury.pseudo%TYPE, myszy NUMBER(3));
    TYPE tablicaKotow IS TABLE OF daneKota INDEX BY BINARY_INTEGER;
    koty               tablicaKotow;

    TYPE lowcy IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
    TYPE zjadacze IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
    TYPE wagi IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    TYPE daty_zlowienia IS TABLE OF DATE INDEX BY BINARY_INTEGER;
    TYPE daty_wydania IS TABLE OF DATE INDEX BY BINARY_INTEGER;
    lowcy_tab          lowcy;
    zjadacze_tab       zjadacze;
    wagi_tab           wagi;
    daty_zlowienia_tab daty_zlowienia;
    daty_wydania_tab   daty_wydania;
    srednie_spozycie   NUMBER;
    index_mysz         NUMBER := 1;
    help_ind           NUMBER;

BEGIN
    WHILE next_day(last_day(biezaca_data) - INTERVAL '7' DAY, 'Środa') <
          data_koniec
        LOOP
            ostatnia_srd := next_day(last_day(biezaca_data) - INTERVAL '7' DAY, 'Środa');

            SELECT CEIL(AVG(PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA, 0))) -- ceil, nie floor bo maja byc nadwyzki myszy
            INTO srednie_spozycie
            FROM KOCURY
            WHERE W_STADKU_OD < biezaca_data;

            SELECT pseudo,
                   przydzial_myszy + NVL(myszy_extra, 0)
                BULK COLLECT
            INTO koty
            FROM Kocury
            WHERE w_stadku_od < biezaca_data;

            help_ind := index_mysz;
            --iteracja po kazdym kocie
            FOR i IN 1..koty.COUNT
                LOOP
                    --iteracja po kazdej myszy z przydzialow kota
                    FOR j IN 1..srednie_spozycie -- srednie spozycie to tyle i kazdy zlapal
                        LOOP
                            --zapisywanie danych myszy do tabel tymczasowych
                            lowcy_tab(index_mysz) := koty(i).pseudo;
                            wagi_tab(index_mysz) := ROUND(DBMS_RANDOM.VALUE(5, 10));
                            daty_zlowienia_tab(index_mysz) :=
                                        biezaca_data +
                                        DBMS_RANDOM.VALUE(0, EXTRACT(DAY FROM ostatnia_srd) - EXTRACT(DAY FROM biezaca_data)- 1);
                            daty_wydania_tab(index_mysz) := ostatnia_srd;
                            --inkrementacja licznika myszy
                            index_mysz := index_mysz + 1;
                        END LOOP;
                END LOOP;

            FOR j IN 1..koty.COUNT
                LOOP
                    FOR k IN 1..koty(j).myszy -- dla kazdej myszy ustalam zjadacza
                        LOOP
                            zjadacze_tab(help_ind) := koty(j).pseudo;
                            help_ind := help_ind + 1;
                        END LOOP;
                END LOOP;

            WHILE help_ind < index_mysz -- jezeli jest jakas nadwyzka
                LOOP
                    zjadacze_tab(help_ind) := 'TYGRYS';
                    help_ind := help_ind + 1;
                END LOOP;

            biezaca_data := ADD_MONTHS(biezaca_data, 1);
        END LOOP;
    index_mysz := index_mysz - 1;
    FORALL i IN 1..index_mysz --wiązanie masowe
        INSERT INTO Myszy(lowca, zjadacz, waga_myszy, data_zlowienia, data_wydania)
        VALUES (lowcy_tab(i), zjadacze_tab(i), wagi_tab(i), daty_zlowienia_tab(i), daty_wydania_tab(i));
end;



delete MYSZY FORCE;

SELECT AVG(PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA, 0))
FROM KOCURY;

SELECT *
FROM MYSZY
ORDER BY NR_MYSZY;

SELECT SUM(PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA, 0))
FROM KOCURY
WHERE W_STADKU_OD < '2012-01-01';

SELECT COUNT(*)
FROM MYSZY
WHERE DATA_WYDANIA BETWEEN '2012-01-01' AND '2012-01-31';


CREATE OR REPLACE PROCEDURE wstaw_myszy(ps VARCHAR2) AS
    TYPE wagi_ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    wagi_tab   wagi_;
    lm          NUMBER;
    LiczbaKotow NUMBER;
    ZLEPSEUDO EXCEPTION;
BEGIN

    SELECT COUNT(*)
    INTO LiczbaKotow
    FROM KOCURY
    WHERE PSEUDO = ps;

    IF LiczbaKotow = 0 THEN
        RAISE ZLEPSEUDO;
    END IF;

    EXECUTE IMMEDIATE 'SELECT waga_myszy FROM MYSZY_' || ps
        BULK COLLECT INTO wagi_tab;
    lm := wagi_tab.COUNT;

    FORALL i IN 1..lm --wišzanie masowe
        INSERT INTO Myszy(lowca, zjadacz, waga_myszy, data_zlowienia, data_wydania)
        VALUES (ps, NULL, wagi_tab(i), SYSDATE, NULL);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE MYSZY_' || ps;
EXCEPTION
    WHEN ZLEPSEUDO THEN DBMS_OUTPUT.PUT_LINE('Podano niepoprawne pseudo.');
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

ROLLBACK;

SELECT * FROM MYSZY WHERE LOWCA='TYGRYS' AND DATA_ZLOWIENIA > '2020-01-01';
SELECT * FROM MYSZY_TYGRYS;

begin
    wstaw_myszy('TYGRYS');
end;


ROLLBACK ;



CREATE OR REPLACE PROCEDURE WYPLATA AS

  nr_kota NUMBER;
  nr_kolejnej_myszy NUMBER;
  PRZYDZIELONO BOOLEAN;
  CZYPRZYDZIELACDALEJ BOOLEAN;
  LICZ NUMBER;
  SUMA NUMBER;

  SRODA DATE := (NEXT_DAY(LAST_DAY(SYSDATE)-7, 'Środa'));

  TYPE MYSZYTABLICA IS TABLE OF MYSZY%ROWTYPE INDEX BY BINARY_INTEGER;
  MYSZYTAB MYSZYTABLICA;

  TYPE KOTREKORD IS RECORD (PSEUDO KOCURY.PSEUDO%TYPE, MYSZY NUMBER(3));
  TYPE KOTTABLICA IS TABLE OF KOTREKORD INDEX BY BINARY_INTEGER;
  KOTY KOTTABLICA;

BEGIN

  SELECT * BULK COLLECT INTO MYSZYTAB
  FROM MYSZY
  WHERE ZJADACZ IS NULL;

  SELECT PSEUDO, PRZYDZIAL_MYSZY + NVL(MYSZY_EXTRA, 0)
  BULK COLLECT INTO KOTY
  FROM KOCURY
  WHERE W_STADKU_OD <= (NEXT_DAY(LAST_DAY(ADD_MONTHS( SYSDATE, -1))-7, 'Środa'))
  START WITH SZEF IS NULL
  CONNECT BY PRIOR PSEUDO=SZEF
  ORDER BY LEVEL;

  nr_kota := 1;
  nr_kolejnej_myszy := 1;
  SUMA:=0;

  FOR I IN  1..KOTY.COUNT
  LOOP
    SUMA := SUMA + KOTY(I).MYSZY;
  END LOOP;

  WHILE nr_kolejnej_myszy <=MYSZYTAB.COUNT AND SUMA>0
    LOOP

    PRZYDZIELONO:=FALSE;
    WHILE NOT PRZYDZIELONO
      LOOP

        IF KOTY(nr_kota).MYSZY > 0 THEN
          MYSZYTAB(nr_kolejnej_myszy).ZJADACZ := KOTY(nr_kota).PSEUDO;
          MYSZYTAB(nr_kolejnej_myszy).DATA_WYDANIA := SRODA;
          KOTY(nr_kota).MYSZY := KOTY(nr_kota).MYSZY - 1;
          SUMA:=SUMA-1;
          PRZYDZIELONO:=TRUE;
          nr_kolejnej_myszy := nr_kolejnej_myszy + 1;
        END IF;

        nr_kota := nr_kota + 1;
        IF nr_kota > KOTY.COUNT THEN nr_kota:=1; END IF;

      END LOOP;

  END LOOP;

  FORALL J IN 1..MYSZYTAB.COUNT SAVE EXCEPTIONS
    UPDATE MYSZY
    SET DATA_WYDANIA = MYSZYTAB(J).DATA_WYDANIA, ZJADACZ = MYSZYTAB(J).ZJADACZ
    WHERE NR_MYSZY = MYSZYTAB(J).NR_MYSZY;

  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END WYPLATA;

BEGIN
    WYPLATA();
end;
ROLLBACK ;